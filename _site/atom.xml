<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Andrew Clark's Blog</title>
 <link href="https://starwarsfan2099.github.io/atom.xml" rel="self"/>
 <link href="https://starwarsfan2099.github.io/"/>
 <updated>2020-01-23T08:03:18-05:00</updated>
 <id></id>
 <author>
   <name>Andrew Clark</name>
   <email>clarkiv@masrhall.edu</email>
 </author>

 
 <entry>
   <title>Analyzing MacOS Malware that Executes a Payload in Memory</title>
   <link href="/2020/01/22/mac-malware/"/>
   <updated>2020-01-22T00:00:00-05:00</updated>
   <id>https://starwarsfan2099.github.io/2020/01/22/mac-malware</id>
   <content type="html">&lt;p&gt;This post was inspired by Dinesh Devadoss’s &lt;a href=&quot;https://twitter.com/dineshdina04/status/1201834142704394242?s=20&quot;&gt;post on twitter&lt;/a&gt; about a piece of MacOS malware from the Lazarus group that loads a Mach-O into memory and executes it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_1.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Loading a Mach-O into memory to execute peeked my interest, and I wanted to know how it worked, and I was able to obtain a sample of the malware. The malware was obtained from &lt;code class=&quot;highlighter-rouge&quot;&gt;https://unioncrypto.vip/&lt;/code&gt; , which is now down but resolved to &lt;code class=&quot;highlighter-rouge&quot;&gt;104.168.167.16&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I first searched the MD5 hash of the file (&lt;code class=&quot;highlighter-rouge&quot;&gt;6588d262529dc372c400bef8478c2eec&lt;/code&gt;) on VirusTotal. It had been uploaded and most of the major AV companies flag the malware.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using VirusTotal, we can get a lot of preliminary information about the malware. Some interesting information is files opened, written, and dropped.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_3.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_4.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_5.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To inspect the file locally, first I mounted the disk image with &lt;code class=&quot;highlighter-rouge&quot;&gt;hdiutil attach UnionCryptoTrader.dmg&lt;/code&gt;. It contained a single file named &lt;code class=&quot;highlighter-rouge&quot;&gt;UnionCryptoTrader.pkg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_6.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The package file was not singed, meaning MacOS would prompt the user with a warning before they could install the package.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_7.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Examine the package file, I extracted the app installed, &lt;code class=&quot;highlighter-rouge&quot;&gt;UnionCryptoTrader.app&lt;/code&gt; and any scripts within the package with resulted in a &lt;code class=&quot;highlighter-rouge&quot;&gt;postinstall&lt;/code&gt; script.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_8.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before I jumped into the app executable, I wanted to see what the &lt;code class=&quot;highlighter-rouge&quot;&gt;postinstall&lt;/code&gt; script did.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_9.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In line 2, script moves a hidden plist file (&lt;code class=&quot;highlighter-rouge&quot;&gt;.vip.unioncrypto.plist&lt;/code&gt;) from the app’s resources to the Launch Daemons directory, probably to give the app persistence across reboots or when a user logs out. The script then sets the plist to be owned by root in line 4. Since it does this, the user will also have to enter the root password to install this on their machine, hopefully adding some doubt to unsuspecting users. Line 6 creates a directory, and line 8 moves a hidden executable (&lt;code class=&quot;highlighter-rouge&quot;&gt;.unioncryptoupdater&lt;/code&gt;) from the resources into the Library path. Line 10 sets executable permissions and line 12 executes the binary. Once this script runs successfully, &lt;code class=&quot;highlighter-rouge&quot;&gt;unioncryptoupdater&lt;/code&gt; is running and is persistently installed to the machine.&lt;/p&gt;

&lt;p&gt;Going to the app’s package contents, then using Command + Shift + . in finder, I could easily see the hidden files. Opening up the plist file shows &lt;code class=&quot;highlighter-rouge&quot;&gt;RunAtLoad&lt;/code&gt; set to true, further confirming persistence.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_10.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The file is a standard Mach-O 64 bit binary with ad-hoc code signing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_11.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, I looked at the strings in the binary.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl_easy_perform() failed: %s
Response &amp;lt;
&amp;gt; thrown.
AES_CYPHER_128 encrypt test case:
AES_CYPHER_128 decrypt test case:
AES_CYPHER_192 encrypt test case:
AES_CYPHER_192 decrypt test case:
AES_CYPHER_256 encrypt test case:
AES_CYPHER_256 decrypt test case:
Input:
IOPlatformExpertDevice
IOPlatformSerialNumber
/System/Library/CoreServices/SystemVersion.plist
ProductVersion
ProductBuildVersion
Mac OS X %s (%s)
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
/tmp/updater
%s %s
NO_ID
%s%s
12GWAPCT1F0I1S14
auth_timestamp
auth_signature
check
https://unioncrypto.vip/update
done
/bin/rcp
Could not create image.
core
Could not link image.
Could not find ec.
Could not resolve symbol: _sym[25] == 0x4d6d6f72.
Could not resolve symbol: _sym[4] == 0x4d6b6e69.
c|w{
9JLX
~=d]
lpHP
cU!}
&quot;3DUfw
0123456789abcdef
dictionaryWithContentsOfFile:
objectForKey:
UTF8String
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first thing I noted was &lt;code class=&quot;highlighter-rouge&quot;&gt;curl_easy_perform() failed: %s&lt;/code&gt;. The binary includes &lt;code class=&quot;highlighter-rouge&quot;&gt;libcurl&lt;/code&gt; so it probably has some network functionality. Other things to note are&lt;code class=&quot;highlighter-rouge&quot;&gt; IOPlatformExpertDevice&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;IOPlatformSerialNumber&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/System/Library/CoreServices/SystemVersion.plist&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductVersion&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductBuildVersion&lt;/code&gt;. The malware appears to gather a lot of system information.&lt;/p&gt;

&lt;p&gt;I then decided it was time to open the binary in a disassembler. The binary begins with the expected Mach-O signature &lt;code class=&quot;highlighter-rouge&quot;&gt;FE ED FA CF&lt;/code&gt;. It does some setup stuff, then proceeds to a function appropriately named &lt;code class=&quot;highlighter-rouge&quot;&gt;onRun&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_12.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The function proceeds to setup a class named &lt;code class=&quot;highlighter-rouge&quot;&gt;Barbeque&lt;/code&gt;. It contains functions such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Barbeque::get&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Barbeque::post&lt;/code&gt;, and includes references to &lt;code class=&quot;highlighter-rouge&quot;&gt;libcurl&lt;/code&gt;, so it’s safe to assume this is the networking class for the malware. The function then calls another function named &lt;code class=&quot;highlighter-rouge&quot;&gt;getDeviceSerial&lt;/code&gt; at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1000051f2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_13.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This code initializes IOKit, calls &lt;code class=&quot;highlighter-rouge&quot;&gt;IORegistryEntryCreateCFProperty&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;IOPlatformSerialNumber&lt;/code&gt; key, converts it to C string buffer with &lt;code class=&quot;highlighter-rouge&quot;&gt;CFStringGetCString&lt;/code&gt;, and returns the serial number. The &lt;code class=&quot;highlighter-rouge&quot;&gt;onRun&lt;/code&gt; function continues and calls a function named &lt;code class=&quot;highlighter-rouge&quot;&gt;getOSVersion&lt;/code&gt; at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x10000522a&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_14.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This code reads the file &lt;code class=&quot;highlighter-rouge&quot;&gt;/System/Library/CoreServices/SystemVersion.plist&lt;/code&gt; and reads the &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductName&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductUserVisibleVersion&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductBuildVersion&lt;/code&gt; keys from the plist file and begins to build a string. Later in &lt;code class=&quot;highlighter-rouge&quot;&gt;onRun&lt;/code&gt;, the current time is added to the string and the hardcoded values &lt;code class=&quot;highlighter-rouge&quot;&gt;\x31\x32\x47\x57\x41\x50\x43\x54\x31\x46\x30\x49\x31\x53\x31\x34&lt;/code&gt; are appended to it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_15.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next the malware invokes &lt;code class=&quot;highlighter-rouge&quot;&gt;Barbeque:post&lt;/code&gt; which uses &lt;code class=&quot;highlighter-rouge&quot;&gt;libcurl&lt;/code&gt; to send the string to &lt;code class=&quot;highlighter-rouge&quot;&gt;https://unioncrypto.vip/update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_16.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The malware then awaits a response. If the response is &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; the function jumps to &lt;code class=&quot;highlighter-rouge&quot;&gt;0x10000583f&lt;/code&gt; which is a short function that calls &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep()&lt;/code&gt; for 10 minutes. However, if the server doesn’t return &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, it base64 decodes the response and calls &lt;code class=&quot;highlighter-rouge&quot;&gt;processUpdate()&lt;/code&gt; as seen in the following disassembly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_17.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this is the first part of &lt;code class=&quot;highlighter-rouge&quot;&gt;processUpdate()&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_18.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are some checks to make sure the string is valid and then the string is AES decrypted as seen at the function call at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x100004c85&lt;/code&gt;. The malware then jumps to &lt;code class=&quot;highlighter-rouge&quot;&gt;_load_from_memory()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_19.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This function first maps some memory with mmap &lt;code class=&quot;highlighter-rouge&quot;&gt;mmap(0, arg2, 7, 0x1001, 0xFFFFFFFF, 0);&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1001&lt;/code&gt; being &lt;code class=&quot;highlighter-rouge&quot;&gt;PROT_READ | PROT_WRITE | PROT_EXEC&lt;/code&gt;. It then copies the decrypted payload into that memory and calls &lt;code class=&quot;highlighter-rouge&quot;&gt;_memory_exec2&lt;/code&gt; at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x100006e2b&lt;/code&gt;. This function is a bit more complicated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_20.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Essentially, this calls the Apple API method &lt;code class=&quot;highlighter-rouge&quot;&gt;NSCreateObjectFileImageFromMemory()&lt;/code&gt; and creates an object file image from a memory buffer, more specifically, the payload placed in memory. &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLinkModule&lt;/code&gt; is then called to link it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_21.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, it calls a function named &lt;code class=&quot;highlighter-rouge&quot;&gt;find_macho&lt;/code&gt; which does as the name implies and searches the memory mapping for the mach magic number &lt;code class=&quot;highlighter-rouge&quot;&gt;0xfeedfacf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_22.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It then searches the payload for a value, &lt;code class=&quot;highlighter-rouge&quot;&gt;0x80000028&lt;/code&gt;. This value is the Mach-O load command, so the payload decrypted from the server is a Mach-O file. The load command, &lt;code class=&quot;highlighter-rouge&quot;&gt;LC_MAIN&lt;/code&gt;, contains various values as well as the entry point of the Mach-O binary.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_23.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The code finds the entry point at offset &lt;code class=&quot;highlighter-rouge&quot;&gt;0x8&lt;/code&gt;, sets up some arguments (all &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;’s), and jumps to the entry point of the Mach-O in memory.&lt;/p&gt;

&lt;p&gt;So, to execute a payload straight from memory, the malware loads a download Mach-O file into memory using &lt;code class=&quot;highlighter-rouge&quot;&gt;mmap()&lt;/code&gt; with protections &lt;code class=&quot;highlighter-rouge&quot;&gt;PROT_READ | PROT_WRITE | PROT_EXEC&lt;/code&gt;, then it uses &lt;code class=&quot;highlighter-rouge&quot;&gt;NSCreateObjectFileImageFromMemory()&lt;/code&gt; to create an object image using the Mach-O in memory, next it uses &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLinkModule&lt;/code&gt; to link the the module in memory, filling that it searches for the Mach-O magic number &lt;code class=&quot;highlighter-rouge&quot;&gt;0xfeedfacf&lt;/code&gt; and then finds the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;LC_MAIN&lt;/code&gt; - the Mach-O load command, then at offset &lt;code class=&quot;highlighter-rouge&quot;&gt;0x8&lt;/code&gt; it finds the entry pint to the Mach-O, sets up argument for the entry point, and jumps to it straight in memory.&lt;/p&gt;

&lt;p&gt;And last but not least:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_24.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the function &lt;code class=&quot;highlighter-rouge&quot;&gt;_load_from_memory()&lt;/code&gt; fails and returns &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, it just copies the Mach-O to &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/updater&lt;/code&gt; and executes it with &lt;code class=&quot;highlighter-rouge&quot;&gt;system()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starwarsfan2099.github.io/public/2020-1-22/Pic_25.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
